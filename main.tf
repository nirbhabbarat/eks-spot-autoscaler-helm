variable "branch" {
  type = string
  default = "master"
  description = "set environment variable TF_VAR_branch"
}

variable "region" {}
variable "cluster_name" {}
variable "cluster_version" {}
variable "subnet_ids" {}
variable "vpc_id" {}
variable "instance_types" {}

# spot variables
variable "spot_termination_handler_chart_name" {}
variable "spot_termination_handler_chart_repo" {}
variable "spot_termination_handler_chart_version" {}
variable "spot_termination_handler_chart_namespace" {}


provider "aws" {
  region = var.region
}

terraform {
  # required_version = "~> 0.12.24" # which means ">= 0.12.24" and "< 0.13"
  backend "s3" {}
}


data "aws_eks_cluster" "cluster" {
  name = module.eks-cluster.cluster_id
}

data "aws_eks_cluster_auth" "cluster" {
  name = module.eks-cluster.cluster_id
}

provider "kubernetes" {
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)
  token                  = data.aws_eks_cluster_auth.cluster.token
  load_config_file       = false
  version                = "~> 1.9"
}

module "eks-cluster" {
  source          = "terraform-aws-modules/eks/aws"
  cluster_name    = var.cluster_name
  cluster_version = var.cluster_version
  subnets         = var.subnet_ids
  vpc_id          = var.vpc_id

  worker_groups_launch_template = [
    {
      name                    = "spot-1"
      override_instance_types = var.instance_types
      spot_instance_pools     = 1
      asg_max_size            = 5
      asg_desired_capacity    = 1
      kubelet_extra_args      = "--node-labels=node.kubernetes.io/lifecycle=spot"
      public_ip               = true
      tags = [
        {
          "key"                 = "k8s.io/cluster-autoscaler/enabled"
          "propagate_at_launch" = "false"
          "value"               = "true"
        },
        {
          "key"                 = "k8s.io/cluster-autoscaler/${var.cluster_name}"
          "propagate_at_launch" = "false"
          "value"               = "true"
        }
      ]
    },
  ]
}

resource "aws_iam_policy" "autoscaling" {
  name        = "eks-autoscaling-${var.cluster_name}"
  description = "eks-autoscaling-${var.cluster_name}"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeTags",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "ec2:DescribeLaunchTemplateVersions"
            ],
            "Resource": "*",
            "Effect": "Allow"
        }
    ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "asg_attach_to_cluster_role" {
  role       = module.eks-cluster.cluster_iam_role_name
  policy_arn = aws_iam_policy.autoscaling.arn
}

resource "aws_iam_role_policy_attachment" "asg_attach_to_instance_role" {
  role       = module.eks-cluster.worker_iam_role_name
  policy_arn = aws_iam_policy.autoscaling.arn
}

/*
output "kubectl_config" {
  description = "kubectl config as generated by the module."
  value       = module.eks-cluster.kubeconfig
}

output "worker_iam_role_name" {
  value       = module.eks-cluster.worker_iam_role_name
}
*/


provider "helm" {
  kubernetes {
    host                   = data.aws_eks_cluster.cluster.endpoint
    cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority.0.data)
    token                  = data.aws_eks_cluster_auth.cluster.token
    load_config_file       = false
  }
  version = "~> 1.2"
}

resource "helm_release" "spot_termination_handler" {
  name       = var.spot_termination_handler_chart_name
  chart      = var.spot_termination_handler_chart_name
  repository = var.spot_termination_handler_chart_repo
  version    = var.spot_termination_handler_chart_version
  namespace  = var.spot_termination_handler_chart_namespace
}

resource "helm_release" "cluster_autoscaler_chart" {
  name      = "cluster-autoscaler-chart"
  chart     = "./cluster-autoscaler-chart"
  namespace = "kube-system"
  set {
    name  = "autoDiscovery.clusterName"
    value = var.cluster_name
  }
}

